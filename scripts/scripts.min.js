"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function polyfill(){var s=window,r=document;if(!("scrollBehavior"in r.documentElement.style&&!0!==s.__forceSmoothScrollPolyfill__)){var e,t=s.HTMLElement||s.Element,a=468,d={scroll:s.scroll||s.scrollTo,scrollBy:s.scrollBy,elementScroll:t.prototype.scroll||f,scrollIntoView:t.prototype.scrollIntoView},p=s.performance&&s.performance.now?s.performance.now.bind(s.performance):Date.now,o=(e=s.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(e)?1:0);s.scroll=s.scrollTo=function(){void 0!==arguments[0]&&(!0!==n(arguments[0])?c.call(s,r.body,void 0!==arguments[0].left?~~arguments[0].left:s.scrollX||s.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:s.scrollY||s.pageYOffset):d.scroll.call(s,void 0!==arguments[0].left?arguments[0].left:"object"!==_typeof(arguments[0])?arguments[0]:s.scrollX||s.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:s.scrollY||s.pageYOffset))},s.scrollBy=function(){void 0!==arguments[0]&&(n(arguments[0])?d.scrollBy.call(s,void 0!==arguments[0].left?arguments[0].left:"object"!==_typeof(arguments[0])?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):c.call(s,r.body,~~arguments[0].left+(s.scrollX||s.pageXOffset),~~arguments[0].top+(s.scrollY||s.pageYOffset)))},t.prototype.scroll=t.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==n(arguments[0])){var e=arguments[0].left,t=arguments[0].top;c.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===t?this.scrollTop:~~t)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");d.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!==_typeof(arguments[0])?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},t.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==n(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):d.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},t.prototype.scrollIntoView=function(){if(!0!==n(arguments[0])){var e=function(e){for(var t,o,n;!1==((e=e.parentNode)===r.body)&&!1===(o=l(t=e,"Y")&&i(t,"Y"),n=l(t,"X")&&i(t,"X"),o||n););return e}(this),t=e.getBoundingClientRect(),o=this.getBoundingClientRect();e!==r.body?(c.call(this,e,e.scrollLeft+o.left-t.left,e.scrollTop+o.top-t.top),"fixed"!==s.getComputedStyle(e).position&&s.scrollBy({left:t.left,top:t.top,behavior:"smooth"})):s.scrollBy({left:o.left,top:o.top,behavior:"smooth"})}else d.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function f(e,t){this.scrollLeft=e,this.scrollTop=t}function n(e){if(null===e||"object"!==_typeof(e)||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"===_typeof(e)&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function l(e,t){return"Y"===t?e.clientHeight+o<e.scrollHeight:"X"===t?e.clientWidth+o<e.scrollWidth:void 0}function i(e,t){var o=s.getComputedStyle(e,null)["overflow"+t];return"auto"===o||"scroll"===o}function u(e){var t,o,n,l,i=(p()-e.startTime)/a;l=i=1<i?1:i,t=.5*(1-Math.cos(Math.PI*l)),o=e.startX+(e.x-e.startX)*t,n=e.startY+(e.y-e.startY)*t,e.method.call(e.scrollable,o,n),o===e.x&&n===e.y||s.requestAnimationFrame(u.bind(s,e))}function c(e,t,o){var n,l,i,a,c=p();a=e===r.body?(l=(n=s).scrollX||s.pageXOffset,i=s.scrollY||s.pageYOffset,d.scroll):(l=(n=e).scrollLeft,i=e.scrollTop,f),u({scrollable:n,method:a,startTime:c,startX:l,startY:i,x:t,y:o})}}!function(){var t=document.getElementsByClassName("site-spinner-wrap")[0];window.addEventListener("load",function(e){t.style.display="none"})}(),"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports={polyfill:polyfill}:polyfill(),function(){var e=document.getElementById("works-btn-footer"),t=document.getElementById("skills-btn-footer"),o=document.getElementById("github-btn-footer"),n=document.getElementById("github-section"),l=document.getElementById("skills-section"),i=document.getElementById("works-section");e.addEventListener("click",function(e){e.preventDefault(),window.scroll({top:i.offsetTop,left:0,behavior:"smooth"})}),t.addEventListener("click",function(e){e.preventDefault(),window.scroll({top:l.offsetTop,left:0,behavior:"smooth"})}),o.addEventListener("click",function(e){e.preventDefault(),window.scroll({top:n.offsetTop,left:0,behavior:"smooth"})})}(),function(){var e=document.getElementById("works-btn"),t=document.getElementById("skills-btn"),o=document.getElementById("github-btn"),n=document.getElementById("github-section"),l=document.getElementById("skills-section"),i=document.getElementById("works-section"),a=document.getElementsByClassName("burger")[0],c=document.getElementById("input-burger"),s=document.getElementsByClassName("header")[0],r=document.getElementsByClassName("header-wrapper")[0];e.addEventListener("click",function(e){e.preventDefault(),a.classList.toggle("open"),c.checked=!1,document.body.classList.remove("modal-open"),window.scroll({top:i.offsetTop,left:0,behavior:"smooth"})}),t.addEventListener("click",function(e){e.preventDefault(),a.classList.toggle("open"),c.checked=!1,document.body.classList.remove("modal-open"),window.scroll({top:l.offsetTop,left:0,behavior:"smooth"})}),o.addEventListener("click",function(e){e.preventDefault(),a.classList.toggle("open"),c.checked=!1,document.body.classList.remove("modal-open"),window.scroll({top:n.offsetTop,left:0,behavior:"smooth"})}),s.addEventListener("click",function(e){e.target!==s&&e.target!==r||(a.classList.remove("open"),c.checked=!1,document.body.classList.remove("modal-open"))}),a.addEventListener("click",function(e){a.classList.toggle("open"),document.body.classList.toggle("modal-open")})}(),function(){var p=document.getElementById("changing-string"),e=document.getElementsByClassName("arrow")[0];p.innerHTML="";document.getElementById("works-section");var f=function d(n,l){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:100,a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1e3;return new Promise(function(t){for(var e=function(e){setTimeout(function(){p.innerHTML+=n[l][e],e===n[l].length-1&&(p.innerHTML,t({phrases:n,index:l,speed:i,timeout:a}))},e*i)},o=0;o<n[l].length;o++)e(o)}).then(function(s){var r=s.timeout;return new Promise(function(c,e){setTimeout(function(){for(var t=s.phrases,o=s.speed,n=s.index,l=t[n],i=l.length,e=function(e){setTimeout(function(){l=l.slice(0,-1),p.innerHTML=l,e===i-1&&(n=n===t.length-1?0:n+1,f.then(function(e){d(t,n,o,r)}),c())},e*o)},a=0;a<i;a++)e(a)},r)})})}(["Junior frontend-разработчик","Junior Javascript-разработчик","HTML-верстальщик"],0,100,2e3);e.addEventListener("click",function(e){e.preventDefault();var t=document.getElementById("works-section");window.scroll({top:t.offsetTop,left:0,behavior:"smooth"})})}();var colors={Mercury:"#ff2b2b",TypeScript:"#2b7489",PureBasic:"#5a6986","Objective-C++":"#6866fb",Self:"#0579aa",edn:"#db5855",NewLisp:"#87AED7","Jupyter Notebook":"#DA5B0B",Rebol:"#358a5b",Frege:"#00cafe",Dart:"#00B4AB",AspectJ:"#a957b0",Shell:"#89e051","Web Ontology Language":"#9cc9dd",xBase:"#403a40",Eiffel:"#946d57",Nix:"#7e7eff",RAML:"#77d9fb",MTML:"#b7e1f4",Racket:"#22228f",Elixir:"#6e4a7e",SAS:"#B34936",Agda:"#315665",wisp:"#7582D1",D:"#ba595e",Kotlin:"#F18E33",Opal:"#f7ede0",Crystal:"#776791","Objective-C":"#438eff","ColdFusion CFC":"#ed2cd6",Oz:"#fab738",Mirah:"#c7a938","Objective-J":"#ff0c5a",Gosu:"#82937f",FreeMarker:"#0050b2",Ruby:"#701516","Component Pascal":"#b0ce4e",Arc:"#aa2afe",Brainfuck:"#2F2530",Nit:"#009917",APL:"#5A8164",Go:"#375eab","Visual Basic":"#945db7",PHP:"#4F5D95",Cirru:"#ccccff",SQF:"#3F3F3F",Glyph:"#e4cc98",Java:"#b07219",MAXScript:"#00a6a6",Scala:"#DC322F",Makefile:"#427819",ColdFusion:"#ed2cd6",Perl:"#0298c3",Lua:"#000080",Vue:"#2c3e50",Verilog:"#b2b7f8",Factor:"#636746",Haxe:"#df7900","Pure Data":"#91de79",Forth:"#341708",Red:"#ee0000",Hy:"#7790B2",Volt:"#1F1F1F",LSL:"#3d9970",eC:"#913960",CoffeeScript:"#244776",HTML:"#e44b23",Lex:"#DBCA00","API Blueprint":"#2ACCA8",Swift:"#ffac45",C:"#555555",AutoHotkey:"#6594b9",Isabelle:"#FEFE00",Metal:"#8f14e9",Clarion:"#db901e",JSONiq:"#40d47e",Boo:"#d4bec1",AutoIt:"#1C3552",Clojure:"#db5855",Rust:"#dea584",Prolog:"#74283c",SourcePawn:"#5c7611",AMPL:"#E6EFBB",FORTRAN:"#4d41b1",ANTLR:"#9DC3FF",Harbour:"#0e60e3",Tcl:"#e4cc98",BlitzMax:"#cd6400",PigLatin:"#fcd7de",Lasso:"#999999",ECL:"#8a1267",VHDL:"#adb2cb",Elm:"#60B5CC","Propeller Spin":"#7fa2a7",X10:"#4B6BEF",IDL:"#a3522f",ATS:"#1ac620",Ada:"#02f88c","Unity3D Asset":"#ab69a1",Nu:"#c9df40",LFE:"#004200",SuperCollider:"#46390b",Oxygene:"#cdd0e3",ASP:"#6a40fd",Assembly:"#6E4C13",Gnuplot:"#f0a9f0",JFlex:"#DBCA00",NetLinx:"#0aa0ff",Turing:"#45f715",Vala:"#fbe5cd",Processing:"#0096D8",Arduino:"#bd79d1",FLUX:"#88ccff",NetLogo:"#ff6375","C Sharp":"#178600",CSS:"#563d7c","Emacs Lisp":"#c065db",Stan:"#b2011d",SaltStack:"#646464",QML:"#44a51c",Pike:"#005390",LOLCODE:"#cc9900",ooc:"#b0b77e",Handlebars:"#01a9d6",J:"#9EEDFF",Mask:"#f97732",EmberScript:"#FFF4F3",TeX:"#3D6117",Nemerle:"#3d3c6e",KRL:"#28431f","Ren'Py":"#ff7f7f","Unified Parallel C":"#4e3617",Golo:"#88562A",Fancy:"#7b9db4",OCaml:"#3be133",Shen:"#120F14",Pascal:"#b0ce4e","F#":"#b845fc",Puppet:"#302B6D",ActionScript:"#882B0F",Diff:"#88dddd","Ragel in Ruby Host":"#9d5200",Fantom:"#dbded5",Zephir:"#118f9e",Click:"#E4E6F3",Smalltalk:"#596706",DM:"#447265",Ioke:"#078193",PogoScript:"#d80074",LiveScript:"#499886",JavaScript:"#f1e05a",VimL:"#199f4b",PureScript:"#1D222D",ABAP:"#E8274B",Matlab:"#bb92ac",Slash:"#007eff",R:"#198ce7",Erlang:"#B83998",Pan:"#cc0000",LookML:"#652B81",Eagle:"#814C05",Scheme:"#1e4aec",PLSQL:"#dad8d8",Python:"#3572A5",Max:"#c4a79c","Common Lisp":"#3fb68b",Latte:"#A8FF97",XQuery:"#5232e7",Omgrofl:"#cabbff",XC:"#99DA07",Nimrod:"#37775b",SystemVerilog:"#DAE1C2",Chapel:"#8dc63f",Groovy:"#e69f56",Dylan:"#6c616e",E:"#ccce35",Parrot:"#f3ca0a","Grammatical Framework":"#79aa7a","Game Maker Language":"#8fb200",Papyrus:"#6600cc","NetLinx+ERB":"#747faa",Clean:"#3F85AF",Alloy:"#64C800",Squirrel:"#800000",PAWN:"#dbb284",UnrealScript:"#a54c4d","Standard ML":"#dc566d",Slim:"#ff8f77",Perl6:"#0000fb",Julia:"#a270ba",Haskell:"#29b544",NCL:"#28431f",Io:"#a9188d",Rouge:"#cc0088","C++":"#f34b7d","AGS Script":"#B9D9FF",Dogescript:"#cca760",nesC:"#94B0C7"};!function(){var t="https://api.github.com",o={headers:{Accept:"application/vnd.github.v3+json","Content-Type":"application/json"}},n="izosimov",l=document.getElementById("spinner"),i=document.getElementById("github-section"),a=null,c=1,s=function(e){var t=new Date(e);return"".concat(t.getDate()," ").concat(["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t.getMonth()]," ").concat(1900+t.getYear())},r=function(){var e=document.createElement("span");return e.classList.add("pagination-list__item"),e.innerHTML="&hellip;",e},d=function(e){var t=document.createElement("a");return t.classList.add("pagination-list__item"),t.innerHTML="".concat(e),t.addEventListener("click",function(e){document.querySelectorAll(".github__repository-item").forEach(function(e){return e.remove()})}),e==c&&t.classList.add("pagination-list__item_active"),t.addEventListener("click",f),t},p=function(e){l.style.display="block",fetch("".concat(t,"/users/").concat(n,"/repos?page=").concat(e,"&per_page=").concat(4),o).then(function(e){if(!e.ok)throw{status:e.status,statusText:e.statusText};return l.style.display="none",e.json()}).then(function(e){var l=document.querySelector(".pagination-list"),t=[];e.forEach(function(e){t.push({name:e.name,forks:e.forks,lang:e.language,updated:e.updated_at,stars:e.stargazers_count,color:colors[e.language],url:e.html_url})}),t.forEach(function(e,t){var o,n;gitHubReposList.insertBefore((o=e,(n=document.createElement("div")).classList.add("github__repository-item"),n.innerHTML='\n            <a href="'.concat(o.url,'" target="_blank" class="github__repository-item-name">').concat(o.name,'</a>\n            <div class="github__item-description">\n                <div style="background-color: ').concat(o.color,'" class="github__language-color"></div>\n                <p class="github__language">').concat(o.lang,"</p>\n                ").concat(o.stars?'<p class="github__stars">'+o.stars+"</p>":"","\n                ").concat(o.forks?'<p class="github__forks">'+o.forks+"</p>":"",'\n                <p class="github__last-update">Updated on ').concat(s(o.updated),"</p>\n            </div>"),n),l)})}).catch(function(e){console.log(e)})};fetch("".concat(t,"/users/").concat(n),o).then(function(e){return e.json()}).then(function(e){a=Math.ceil(e.public_repos/4),u(c,a)});var f=function(e){c=e.target.innerHTML;document.getElementById("gitHubReposList");var t=document.querySelector(".pagination-list"),o=document.querySelectorAll(".pagination-list__item"),n={top:i.offsetTop,left:0,behavior:"smooth"};window.scroll(n),o.forEach(function(e){return e.remove()}),t.remove(),u(c,a)},u=function(e,t){var o=document.getElementById("gitHubReposList"),n=document.createElement("div");if(n.classList.add("pagination-list"),1===t)n.appendChild(d(1));else if(t<4)for(var l=1;l<=t;l++)n.appendChild(d(l));else+e-1==0?(n.appendChild(d(+e)),n.appendChild(d(+e+1)),n.appendChild(r()),n.appendChild(d(+t))):+e-1==1?(n.appendChild(d(+e-1)),n.appendChild(d(+e)),n.appendChild(d(+e+1)),n.appendChild(r()),n.appendChild(d(+t))):+e-2==1?(n.appendChild(d(1)),n.appendChild(d(+e-1)),n.appendChild(d(+e)),n.appendChild(d(+e+1)),n.appendChild(r()),n.appendChild(d(+t))):+e+1==+t?(n.appendChild(d(1)),n.appendChild(r()),n.appendChild(d(+e-1)),n.appendChild(d(+e)),n.appendChild(d(+t))):+e+2==+t?(n.appendChild(d(1)),n.appendChild(r()),n.appendChild(d(+e-1)),n.appendChild(d(+e)),n.appendChild(d(+e+1)),n.appendChild(d(+t))):+e-1!=1&&+e+1!=+t&&+e+2!=+t&&+e!=+t?(n.appendChild(d(1)),n.appendChild(r()),n.appendChild(d(+e-1)),n.appendChild(d(+e)),n.appendChild(d(+e+1)),n.appendChild(r()),n.appendChild(d(+t))):+e==+t&&(n.appendChild(d(1)),n.appendChild(r()),n.appendChild(d(+e-1)),n.appendChild(d(+e)));o.appendChild(n),p(e)}}(),function(){var n=document.getElementsByClassName("recent-works__show-more")[0],l=document.getElementsByClassName("recent-works__row"),i=document.getElementById("works-section");n.dataset.isOpen=!1;for(var e=1;e<l.length;e++)l[e].style.display="none";n.addEventListener("click",function(e){if("false"===n.dataset.isOpen){for(var t=1;t<l.length;t++)l[t].style.display="flex";n.dataset.isOpen=!0,n.innerHTML="Скрыть"}else{for(var o=1;o<l.length;o++)l[o].style.display="none";window.scroll({top:i.offsetTop,behavior:"smooth"}),n.dataset.isOpen=!1,n.innerHTML="Смотреть ещё"}})}(),function(){var o=document.getElementsByClassName("skills__show-more")[0],n=document.getElementsByClassName("skills__skills-item"),e=document.getElementsByClassName("skills__item-title"),t=document.getElementById("skills-section"),l=window.screen.height,i=document.body.clientWidth;if(document.body.clientWidth<=767){o.dataset.isOpen=!1,o.innerHTML="Смотреть ещё";for(var a=n.length-1;4<=a;a--)n[a].style.display="none"}else o.dataset.isOpen=!0;o.addEventListener("click",function(){!function(e,t,o){if("false"===e.dataset.isOpen){for(var n=t.length-1;4<=n;n--)t[n].style.display="flex";e.dataset.isOpen=!0,e.innerHTML="Скрыть"}else{for(var l=t.length-1;4<=l;l--)t[l].style.display="none";e.dataset.isOpen=!1,e.innerHTML="Смотреть ещё",window.scroll({top:o.offsetTop,left:0,behavior:"smooth"})}}(o,n,t)}),window.addEventListener("resize",function(){if(80<Math.abs(window.screen.height-l)||10<Math.abs(document.body.clientWidth-i))if(l=window.screen.height,i=document.body.clientWidth,document.body.clientWidth<=767){o.dataset.isOpen=!1,o.innerHTML="Смотреть ещё";for(var e=n.length-1;4<=e;e--)n[e].style.display="none"}else{for(var t=n.length-1;4<=t;t--)n[t].style.display="flex";o.dataset.isOpen=!0,o.innerHTML="Скрыть"}});for(var c=0;c<e.length;c++)e[c].dataset.skillsNum="0".concat(c+1)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
